---
- name: Validate the state of BGP Peers
  hosts: all
  connection: network_cli
  gather_facts: no
    #  serial: 1

  vars:
  
    show_cmds:
      - show bgp summary
      - show isis adjacency
      
  vars_prompt:
    - name: "filename"
      prompt: "Enter (1) for precheck (2) for postcheck"
      private: no

  tasks:
    - set_fact:
        results_file: "precheck"
      when: filename == '1'

    - set_fact:
        results_file: "postcheck"
      when: filename == '2'

    - name: Find old reports
      find:
        path: "{{ report_dir }}"
        file_type: file
        patterns: '{{ inventory_hostname }}_*.postcheck'
      register: old_reports
      when: filename == '1' 
      
    - name: Delete old reports
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ old_reports.files }}"
      when: filename == '1'

    - name: Run show commands
      cli_command:
        command: "{{ item }}"
      with_items: "{{ show_cmds }}"
      register: CLI_OUTPUT

    - debug: var=CLI_OUTPUT.results[0].stdout

        #    - debug: var=CLI_OUTPUT.results[1].stdout

    - name: Run BGP and ISIS filters
      set_fact:
        BGP_IPV4_NEIGHBORS: "{{ CLI_OUTPUT.results[0].stdout | parse_bgp_neighbors }}"
        BGP_IPV6_NEIGHBORS: "{{ CLI_OUTPUT.results[0].stdout | parse_ipv6_bgp_neighbors }}"
        ISIS_NEIGHBORS: "{{ CLI_OUTPUT.results[1].stdout | parse_isis_neighbors }}"

          #    - debug: var=BGP_IPV4_NEIGHBORS

          #    - debug: var=ISIS_NEIGHBORS

    - name: Generate BGP/ISIS state report
      template:
        src: "./templates/bgp_report.j2"
        dest: "./reports/{{ inventory_hostname }}_neigh_state.{{ results_file }}"
        
    - name: Cat {{ inventory_hostname }} BGP/ISIS Neighbor report
      shell: "cat ./reports/{{ inventory_hostname }}_neigh_state.{{ results_file }}"
      register: cat_neigh
      ignore_errors: yes
      
    - name: Set neighbor report vars
      set_fact:
        report: "{{ cat_neigh.stdout | to_nice_yaml }}"

    - debug: var=report        

    - name: "Validate ISIS Neighbors"
      assert:
        quiet: True
          #        that: "OSPF_NEIGHBORS | length == 2"
        that: item.State == 'Up'
        success_msg: |-
          Neighbor {{ item.Neighbor }} is in UP state
        fail_msg: |-
          Neighbor {{ item.Neighbor }} in State {{ item.State }}
      loop: "{{ ISIS_NEIGHBORS }}"
      loop_control:
        label: "Interface: {{ item.Interface }}, State: {{ item.State }}"


    - name: "Establisthed IPv4 BGP Peers"
      assert:
        quiet: True
        # Ensure that the state is not active or idle. If it is established 
        # the number of routes received.
        that: 
          - "item.State != 'Active'"
          - "item.State != 'Idle'"
          - "item.State != 'Connect'"
          
        msg: |-
          Neighbor {{ item.Peer }} is not established!
      # This is the magic that causes the assert to run for each element
      # in the array.
      loop: "{{ BGP_IPV4_NEIGHBORS }}"
      loop_control:
        # Create a label to output for each element in the array. Without
        # this the full object gets printed out.
        label: "Peer: {{ item.Peer }}, AS Number: {{ item.AS }}"
      ignore_errors: true
    
    - name: "Establisthed IPv6 BGP Peers"
      assert:
        quiet: True
        # Ensure that the state is not active or idle. If it is established 
        # the number of routes received.
        that: 
          - "item.State != 'Active'"
          - "item.State != 'Idle'"
          - "item.State != 'Connect'"
          
        msg: |-
          Neighbor {{ item.Peer }} is not established!
      # This is the magic that causes the assert to run for each element
      # in the array.
      loop: "{{ BGP_IPV6_NEIGHBORS }}"
      loop_control:
        # Create a label to output for each element in the array. Without
        # this the full object gets printed out.
        label: "Peer: {{ item.Peer }}, AS Number: {{ item.AS }}"
      ignore_errors: true
    
         
    - name: run show bgp neighbor JSON output
      junos_command:  
        commands:
          - "show bgp neighbor"
        display: json  
#      cli_command:
#        command: 'show bgp neighbor {{ item }} | display json no-export-path'
#      with_items: "{{ bgp_peers }}"
      register: bgp_json

    # bgp_neighbor is a dictionary
    - name: Regex replace dash/master in json output
      set_fact:
        bgp_neighbor: "{{ item|regex_replace('-', '_')|regex_replace('{master}', '  ') | trim }}"
      with_items: "{{ bgp_json.stdout }}"
      loop_control:
        label: "{{ item }}"
      no_log: true
      register: result

#    - name: Save bgp_neighor 
#      copy:
#        content: "{{ bgp_neighbor | to_nice_yaml }}"
#        dest: "./reports/{{ inventory_hostname }}_bgp_neighbor.json"

### Old way to clean up json output
    - set_fact:
        cli_json: "{{ bgp_json.stdout| regex_replace('{master}', '  ')| regex_replace('-','_') | trim }}"
      no_log: true
      tags: never
    
    - name: Save bgp data to file
      copy:
        content: "{{ cli_json | to_nice_yaml }}"
        dest: "./reports/{{ inventory_hostname }}_bgp.json"
      delegate_to: localhost
      tags: never
      
    - name: Run sed on file to clean up bad lines
      shell: sed -i '1d' ./reports/{{ inventory_hostname }}_bgp.json
      delegate_to: localhost
      tags: never
          
    - name: Read in cleaned up json data
      set_fact:
        json_file: "{{ lookup('file', './reports/{{ inventory_hostname }}_bgp.json') | from_json }}"
      register: result
      delegate_to: localhost
      no_log: true
      tags: never
### End old json cleanup ###
  
# Run jinja template on dictionary
    - name: Run jinja template on json_file variable -> {{ inventory_hostname }}
      template:
        src: "./templates/bgp_neigh.j2"
#        src: "./templates/bgp_peer.j2"
        dest: "./reports/{{ inventory_hostname }}_bgp-peers.{{ results_file }}"

    
    - name: Check for precheck files
      stat:
        path: "{{ report_dir }}/{{ inventory_hostname }}_bgp-peers.precheck"
      register: precheck
      delegate_to: localhost

    - name: Check for postcheck files
      stat:
        path: "{{ report_dir }}/{{ inventory_hostname }}_bgp-peers.postcheck"
      register: postcheck
      delegate_to: localhost
      
    - name: Diff Pre and Post BGP/ISIS Neighbors
      copy:
        src: "{{ report_dir }}/{{ inventory_hostname }}_neigh_state.{{results_file}}"
        dest: "{{ report_dir }}/{{ inventory_hostname }}_neigh_state.precheck"
      check_mode: yes
      diff: yes
      tags: diff
      when: precheck.stat.exists and postcheck.stat.exists    
      
    - name: Diff Pre and Post BGP State
      copy:
        src: "{{ report_dir }}/{{ inventory_hostname }}_bgp-peers.{{results_file}}"
        dest: "{{ report_dir }}/{{ inventory_hostname }}_bgp-peers.precheck"
      check_mode: yes
      diff: yes
      tags: diff
      when: precheck.stat.exists and postcheck.stat.exists
      register: diff_data
    